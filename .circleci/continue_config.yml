version: 2.1

# --------------- Parameters (from Github Actions) ---------------
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  releaseType:
    type: string
    # Injected from setup workflow
    default: ""

# --------------- Alias ---------------
default_docker: &default_docker
  - image: cimg/node:lts

# --------------- Commands ---------------
commands:
  install_dependencies:
    description: "Dependencies installation"
    steps:
      - run:
          name: "Installing dependencies"
          command: pnpm install

  setup:
    description: "Setup project"
    steps:
      - checkout
      # No need to install pnpm, cimg/node:lts already bring it
      - install_dependencies

  build:
    description: "Build the appplication"
    parameters:
      target_env:
        type: string
      package:
        type: string
    steps:
      - run:
          name: Build
          command: |
            echo "Built << parameters.package >> for << parameters.target_env >> !"
  deploy:
    parameters:
      target_env:
        type: string
      package:
        type: string
    steps:
      - run:
          name: Deploy
          command: |
            echo "Deployed << parameters.package >> on << parameters.target_env >> !"

# --------------- Jobs ---------------
jobs:
  test:
    docker: *default_docker
    resource_class: small
    steps:
      - setup
      - run:
          name: Run tests
          command: echo "Tests succeed"
  build-preview:
    docker: *default_docker
    resource_class: small
    parameters:
      package:
        type: string
    steps:
      - build:
          target_env: "preview"
          package: << parameters.package >>

  deploy-preview:
    docker: *default_docker
    resource_class: small
    parameters:
      package:
        type: string
    steps:
      - deploy:
          target_env: "preview"
          package: << parameters.package >>

  build-live:
    docker: *default_docker
    resource_class: small
    parameters:
      package:
        type: string
    steps:
      - build:
          target_env: "live"
          package: << parameters.package >>

  deploy-live:
    docker: *default_docker
    resource_class: small
    parameters:
      package:
        type: string
    steps:
      - deploy:
          target_env: "live"
          package: << parameters.package >>

# --------------- Jobs ---------------
workflows:
  build_deploy_preview:
    when:
      equal: ['pre-release', << pipeline.parameters.releaseType >>]
    jobs:
      - build-preview:
          name: build-preview-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
      - deploy-preview:
          name: deploy-preview-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
          requires:
            - build-preview-<< matrix.package >>
  build_deploy_preview_and_live:
    when:
      equal: ['release', << pipeline.parameters.releaseType >>]
    jobs:
      - build-preview:
          name: build-preview-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
      - deploy-preview:
          name: deploy-preview-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
          requires:
            - build-preview-<< matrix.package >>
      - build-live:
          name: build-live-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
      - deploy-live:
          name: deploy-live-<< matrix.package >>
          matrix:
            parameters:
              # Dynamically injected and written during setup phase
              package: []
          requires:
            - build-live-<< matrix.package >>
